import cPickle as pickle

import scipy.io

import numpy as np

import theano.tensor as T
import theano
from theano.sandbox.rng_mrg import MRG_RandomStreams as RandomStreams

from utils import *

#this scrip is designed to produce prediction results from the pickled
#models generated by the utils and cnnlearning scripts

def load_dataset_test():
    """Open the file located at ../train/test.mat and extracts a tuple
    CNNDat,HogDat,FullDat"""
    train = scipy.io.loadmat('../train/test.mat')
    data = train['test'][0,0]
    xcnndat = data[0]
    xhogdat = data[1]
    xfulldat = np.concatenate((xhogdat, xcnndat),axis=1)
    return xcnndat,xhogdat,xfulldat

def model(X, w_h, b_h, w_h2, b_h2, w_o, b_o, p1, p2):
    """Define the output tensor of the model given its inputs and
    parameters."""
    X = dropout(X, srng, p1)
    h = rectify(T.dot(X, w_h)+b_h)

    h = dropout(h, srng, p2)
    h2 = rectify(T.dot(h, w_h2)+b_h2)

    h2 = dropout(h2, srng, p2)
    py_x = softmax(T.dot(h2, w_o)+b_o)
    return py_x

if __name__=='__main__':
    srng = RandomStreams()
    #switch between mult and bin to have results for multiclass or binary
    #classification.
    tog = 'mult'
    #this variable gives the version of the pickled parameters you want to
    #use
    suff = '900'
    if tog == 'mult':
        input_dir = 'models/'
        dmap = {3:np.array([1,0,0,0]),4:np.array([0,1,0,0]),
                2:np.array([0,0,1,0]),1:np.array([0,0,0,1])}
        rmap = {0:3,1:4,2:2,3:1}
        filename = 'pred_multiclass'
    else:
        input_dir = 'models_bin/'
        dmap = {1:np.array([1,0]),2:np.array([1,0]),3:np.array([1,0]),
                4:np.array([0,1])}
        filename = 'pred_binary'
    _,_,x = load_dataset_test()

    #usual theano stuffs
    teX = theano.shared(floatX(x))

    w_h = theano.shared(floatX(pickle.load(open(input_dir+'w_h'+suff,'rb'))))
    w_h2 = theano.shared(floatX(pickle.load(open(input_dir+'w_h2'+suff,'rb'))))
    b_h = theano.shared(floatX(pickle.load(open(input_dir+'b_h'+suff,'rb'))))
    b_h2 = theano.shared(floatX(pickle.load(open(input_dir+'b_h2'+suff,'rb'))))
    w_o = theano.shared(floatX(pickle.load(open(input_dir+'w_o'+suff,'rb'))))
    b_o = theano.shared(floatX(pickle.load(open(input_dir+'b_o'+suff,'rb'))))

    X = T.dmatrix()

    py_x = model(X,w_h,b_h,w_h2,b_h2,w_o,b_o,0.,0.)
    y_x = T.argmax(py_x,axis=1)

    predict = theano.function(inputs=[],outputs=y_x,
                              givens={
                                  X:teX
                              })
    tres = predict()
    res = np.zeros((tres.shape[0],1))
    if tog=='mult':
        for i,it in enumerate(tres):
            res[i] = rmap[tres[i]]
    else:
        for i,it in enumerate(tres):
            res[i] = 1-tres[i]
    scipy.io.savemat(filename+'.mat',mdict={'Ytest':res})
